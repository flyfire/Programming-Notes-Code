<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 写Sql语句   -->
<mapper namespace="me.ztiany.mybatis.test.basic.mapper.UserMapper">

    <!-- 通过ID查询一个用户 -->
    <select id="findUserById" parameterType="Integer" resultType="me.ztiany.mybatis.pojo.User">
        SELECT *
        FROM MyBatis_user
        WHERE id = #{v}
    </select>

    <!-- 根据用户名称模糊查询用户列表
    #{}    select * from user where id = ?;，这是占位符，这里的 ? 占位的参数会自动加上单引号，比如  '五'， #{}可以使用任何字符都可以接收参数，比如 v
    ${}    select * from user where username like '%五%';，这是字符串拼接，字符串拼接不自动加上''单引号，${} 必须使用 value 接收参数
    select * from MyBatis_user where username like "%"'王'"%"; 等效于  select * from MyBatis_user where username like '%王%';
     -->

    <select id="findUserByUsername" parameterType="String" resultType="me.ztiany.mybatis.pojo.User">
        SELECT *
        FROM MyBatis_user
        WHERE username LIKE "%"#{haha}"%"
    </select>

    <!-- 添加用户
        values中的变量只需要与入参的属性名对应即可
        select LAST_INSERT_ID()，MySQL提供的返回最后插入的id
    -->
    <insert id="insertUser" parameterType="me.ztiany.mybatis.pojo.User">
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into MyBatis_user (username,birthday,address,sex)
        values (#{username},#{birthday},#{address},#{sex})
    </insert>

    <!-- 更新 -->
    <update id="updateUserById" parameterType="me.ztiany.mybatis.pojo.User">
        UPDATE MyBatis_user
        SET username = #{username}, sex = #{sex}, birthday = #{birthday}, address = #{address}
        WHERE id = #{id}
    </update>

    <!-- 删除 -->
    <delete id="deleteUserById" parameterType="Integer">
        DELETE FROM MyBatis_user
        WHERE id = #{vvvvv}
    </delete>


</mapper>